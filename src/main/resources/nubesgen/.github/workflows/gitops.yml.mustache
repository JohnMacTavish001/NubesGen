{{=<% %>=}}
name: GitOps

###
# GitOps - automatic infrastructure management GitHub Action
#
# See https://github.com/microsoft/NubesGen/blob/main/docs/gitops-overview.md
# for more information about using GitOps with NubesGen.
###

on:
  push:
    branches:
      - 'env-*'
<%#runtimeDotnet%>

env:
  DOTNET_VERSION: '3.1'
  APP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
<%/runtimeDotnet%>
<%#runtimeNodejs%>

env:
  NODEJS_VERSION: '14'
  APP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
<%/runtimeNodejs%>

jobs:
<%#runtimeDocker%>
  build-and-deploy:
<%/runtimeDocker%>
<%^runtimeDocker%>
  manage-infrastructure:
<%/runtimeDocker%>
    runs-on: ubuntu-20.04
    steps:
      - name: Apply Terraform configuration
        uses: jdubois/nubesgen-actions/gitops-apply-terraform@main
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          tf_storage_account: ${{ secrets.TF_STORAGE_ACCOUNT }}
<%#runtimeDocker%>
  <%#applicationTypeAppService%>
    <%#runtimeSpring%>
      - name: Build and deploy a Docker image of a Spring Boot project
        uses: jdubois/nubesgen-actions/gitops-build-and-deploy-to-app-service-docker-spring@main
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
    <%/runtimeSpring%>
    <%^runtimeSpring%>
      - name: Build and deploy a Docker image of a Spring Boot project
        uses: jdubois/nubesgen-actions/gitops-build-and-deploy-to-app-service-docker@main
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
    <%/runtimeSpring%>
  <%/applicationTypeAppService%>
<%/runtimeDocker%>
<%#runtimeJava%>
  <%#applicationTypeAppService%>
  build:
    runs-on: ubuntu-20.04
    steps:
    <%#runtimeMaven%>
      - name: Build a Java project using Maven
        uses: jdubois/nubesgen-actions/gitops-build-java-maven@main
      <%#runtimeQuarkus%>
        with:
          build_command: mvn package -Pprod,azure -Dquarkus.package.type=uber-jar
      <%/runtimeQuarkus%>
    <%/runtimeMaven%>
    <%#runtimeGradle%>
      - name: Build a Java project using Gradle
        uses: jdubois/nubesgen-actions/gitops-build-java-gradle@main
    <%/runtimeGradle%>
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy a Java application to Azure App Service
        uses: jdubois/nubesgen-actions/gitops-deploy-to-app-service-java@main
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
  build:
    runs-on: ubuntu-20.04
    steps:
    <%#runtimeMaven%>
      - name: Build a Java function using Maven
        uses: jdubois/nubesgen-actions/gitops-build-function-java-maven@main
    <%/runtimeMaven%>
    <%#runtimeGradle%>
      - name: Build a Java function using Gradle
        uses: jdubois/nubesgen-actions/gitops-build-function-java-gradle@main
    <%/runtimeGradle%>
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy a Java function to Azure Functions
        uses: jdubois/nubesgen-actions/gitops-deploy-to-function-java@main
  <%/applicationTypeFunction%>
<%/runtimeJava%>
<%#runtimeDotnet%>
  build:
      runs-on: ubuntu-20.04
      steps:
  <%#applicationTypeAppService%>
        - name: Build a .NET application
          uses: jdubois/nubesgen-actions/gitops-build-dotnet@main
          with:
            application_package_path: ${{ env.APP_PACKAGE_PATH }}
            dotnet_version: ${{ env.DOTNET_VERSION }}
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
        - name: Build a .NET serverless function
          uses: jdubois/nubesgen-actions/gitops-build-function-dotnet@main
          with:
            application_package_path: ${{ env.APP_PACKAGE_PATH }}
            dotnet_version: ${{ env.DOTNET_VERSION }}
  <%/applicationTypeFunction%>
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
      - name: Set environment variables
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v2
        with:
          name: package
          path: ./output
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  <%#applicationTypeAppService%>
      - name: 'Deploy to Azure App Service'
        uses: azure/webapps-deploy@v2
        with:
          app-name: app-<% applicationName %>-${{ env.ENVIRONMENT }}-001
          package: './output'
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        with:
          app-name: func-<% applicationName %>-${{ env.ENVIRONMENT }}-001
          package: './output'
  <%/applicationTypeFunction%>
<%/runtimeDotnet%>
<%#runtimeNodejs%>
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODEJS_VERSION }}
      - name: Cache NPM packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install NPM packages
        run: npm ci
      - name: Build the application
        run: npm run build --if-present
      - name: Run tests
        run: npm test --if-present
      - name: Package application
        run: |
          PKG_FILE=$(npm pack ${{ env.APP_PACKAGE_PATH }} | tail -n1)
          tar -xvf $PKG_FILE
          cp -f ${{ env.APP_PACKAGE_PATH }}/package-lock.json package/
          cd package
          npm ci --production
          zip -r ../package.zip *
      - name: Temporarily save package
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: './package.zip'
          retention-days: 1
  deploy:
    needs: [manage-infrastructure, build]
    runs-on: ubuntu-20.04
    steps:
      - name: Set environment variables
        run: |
          TAG_NAME=${GITHUB_REF#refs/*/}
          echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
      - name: Get built package
        uses: actions/download-artifact@v2
        with:
          name: package
          path: .
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  <%#applicationTypeAppService%>
      - name: 'Deploy to Azure App Service'
        uses: azure/webapps-deploy@v2
        with:
          app-name: app-<% applicationName %>-${{ env.ENVIRONMENT }}-001
          package: './package.zip'
  <%/applicationTypeAppService%>
  <%#applicationTypeFunction%>
      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        with:
          app-name: func-<% applicationName %>-${{ env.ENVIRONMENT }}-001
          package: './package.zip'
  <%/applicationTypeFunction%>
<%/runtimeNodejs%>
